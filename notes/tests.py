# Generated by Django 4.2.23 on 2025-07-23 14:51

from django.db import migrations


def load_initial_data(apps, schema_editor):
    DrinkType = apps.get_model('notes', 'DrinkType')
    Ingredients = apps.get_model('notes', 'Ingredients')

    # Load drink types
    drink_types = [
        ('IPA', 'Hoppy beer style with strong bitterness'),
        ('Stout', 'Dark roasted malt, rich and creamy'),
        ('Pale Ale', 'Balanced beer with moderate hops'),
        ('Lager', 'Crisp, clean beer with light flavor'),
        ('Porter', 'Dark beer with chocolate and coffee notes'),
        ('Wheat Beer', 'Light, cloudy beer with wheat malt'),
        ('Sour Ale', 'Tart beer with fruity or funky flavors'),
        ('Cider', 'Fermented apple juice, sweet or dry'),
        ('Perry', 'Fermented pear juice, similar to cider'),
        ('Session IPA', 'Lower-alcohol IPA with hoppy character'),
        ('Pilsner', 'Light, golden beer with crisp finish'),
        ('Amber Ale', 'Malty beer with caramel undertones'),
        ('Fruit Cider', 'Cider infused with fruit flavors'),
        ('Barleywine', 'Strong, sweet beer with high alcohol')
    ]
    ingredients = [
        ('Malted Barley', 'The primary fermentable sugar source for beer, available in various types like **Pilsner**, **Pale**, **Crystal**, **Chocolate**, and **Black malts**, each contributing unique flavors.'),
        ('Hops (Bittering)', 'Hops added early in the boil for bitterness, such as **Magnum** or **Horizon**.'),
        ('Hops (Aroma)', 'Hops added late in the boil or during dry hopping for their aromatic compounds and flavors, including citrusy (**Citra**, **Cascade**), piney (**Chinook**), floral (**East Kent Goldings**), or tropical (**Mosaic**, **Galaxy**) notes.'),
        ('Hops (Dual-Purpose)',
         'Hops that provide both bitterness and aroma, like **Centennial** or **Challenger**.'),
        ('Yeast (Ale - Saccharomyces cerevisiae)', 'Top-fermenting yeast strains that produce diverse flavor compounds (esters, phenols) at warmer temperatures (15-24°C), suitable for various ale styles. Examples include **American Ale yeast**, **British Ale yeast**, **Belgian Ale yeast**, and **Kveik yeast**.'),
        ('Yeast (Lager - Saccharomyces pastorianus)',
         'Bottom-fermenting yeast strains that work at colder temperatures (7-13°C), resulting in clean, crisp, and subtle flavor profiles, ideal for lagers.'),
        ('Yeast (Wild - Brettanomyces)',
         'Yeast strains that can introduce funky, earthy, or "barnyard" notes, often used in specialty sour beers and ciders.'),
        ('Water', 'The most voluminous ingredient, whose mineral content significantly impacts mash chemistry, yeast health, and the final beer\'s taste and mouthfeel.'),
        ('Apples (or other fruit)', 'The primary fermentable sugar source for cider, with the choice of **apple varieties** (sweet, tart, bittersharp, bittersweet) or other fruits dictating the cider\'s balance of sweetness, acidity, and tannins.'),
        ('Yeast Nutrient', 'Supplements (e.g., **Diammonium Phosphate (DAP)**) providing nitrogen, vitamins, and minerals to ensure healthy yeast growth and efficient fermentation, especially in high-gravity worts or juices.'),
        ('Yeast Food', 'A complete blend of nutrients for optimal yeast health during fermentation.'),
        ('Irish Moss ',
         'A fining agent used in the boil to help proteins coagulate and settle out, leading to clearer beer.'),
        ('Finings', 'Clarifying agents added after fermentation to remove haze-causing particles. Examples include **Isinglass**, **Gelatin**, **Bentonite**, **Silica-based finings (e.g., Kieselsol)**, and **PVPP (Polyclar)**.'),
        ('Priming Sugar', 'A fermentable sugar '),
        ('Carbonation Dioxide (CO2)', 'Used for force carbonating beer or cider in kegs, providing a controlled and rapid method for achieving desired carbonation levels.')
    ]

    for name, desc in drink_types:
        DrinkType.objects.get_or_create(name=name, description=desc)

    for name, desc in ingredients:
        Ingredients.objects.get_or_create(name=name, description=desc)


class Migration(migrations.Migration):
    dependencies = [
        ('notes', '0001_initial'),
    ]
    operations = [migrations.RunPython(load_initial_data)]
